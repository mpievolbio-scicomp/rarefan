package overrepresented;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;

import util.DNAmanipulations;

//Reads word frequency data (generated by PrintWordFrequencyBothStrands.java) and calculates 
//the frequency threshold for a certain p-Value
//that means if the p-Value is to be lower than 0.01 than it returns the word frequency above which 
//less than 1% of the different words occur
//the function for that is getFrequency

//getpValue does pretty much the same but for a given word frequency

//input is frequency file, p-Value and word length
public class GetFrequencyBelowPvalue {
	public static void main(String args[]){
		File in=new File(args[0]); 
		double pValue=Double.parseDouble(args[1]);
		int wl=Integer.parseInt(args[2]);
		GetFrequencyBelowPvalue t=new GetFrequencyBelowPvalue(in,wl);
		System.out.println(t.getFrequency(pValue,wl));
		System.out.println(t.getpValue(10,wl));
	}
	HashMap<Integer,Integer> total ;
	HashMap<Integer,ArrayList<Integer>> hm;
	HashMap<BitSet,Integer> freqs=new HashMap<BitSet, Integer>();
	
	public GetFrequencyBelowPvalue(File wordFrequencies,int wl){
		readFrequencies(wordFrequencies, wl);
	}
	
	public int getFrequency(double pValue,int wl){
		int freq=0;
		ArrayList<Integer> al=hm.get(wl);
		int tot=total.get(wl);
		for(int i=0;i<al.size();i++){
			freq+=al.get(i);
			if(1-((freq*1.0)/tot)<pValue){
				return i;
			}
		}
		return al.size();
	}
	
	public double getpValue(int freq,int wl){
		double pValue=1;
		int sum=0;
		ArrayList<Integer> al=hm.get(wl);
		int tot=total.get(wl);
		for(int i=0;i<freq;i++){
			sum+=al.get(i);
		}
		pValue=1-((sum*1.0)/tot);
		
		return pValue;
	}
	
	private  void readFrequencies(File in,int wl){
		hm=new HashMap<Integer, ArrayList<Integer>>();
		total=new HashMap<Integer, Integer>();
		try{
			BufferedReader br=new BufferedReader(new FileReader(in));
			String line="";
			while((line=br.readLine())!=null){
				String split[]=line.split("\\s+");
				if(split[0].length()!=wl)continue;
				freqs.put(DNAmanipulations.codeDNA(split[0]),Integer.parseInt(split[1]));
				if(!hm.containsKey(wl)){
					ArrayList<Integer> al=new ArrayList<Integer>();
					hm.put(wl,al);
					total.put(wl,0);
				}
				add(hm.get(wl),Integer.parseInt(split[1]));
				total.put(wl, total.get(wl)+1);
			}
			br.close();
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	
	public int getFreq(String word){
		if(word.contains("N")){
			return 0;
		}
		if(!freqs.containsKey(DNAmanipulations.codeDNA(word))){
			return freqs.get(DNAmanipulations.codeDNA(DNAmanipulations.reverse(word)));
		}else{
			return freqs.get(DNAmanipulations.codeDNA(word));
		}
	}
	public double getpvalue(String word){
		return getpValue(getFreq(word), word.length());
		
	}
	private void add(ArrayList<Integer> al,Integer i){
		if(al.size()<=i){
			for(int j=al.size();j<=i+1;j++){
				al.add(0);
			}
		}
		al.set(i, al.get(i)+1);
	}
	
}
